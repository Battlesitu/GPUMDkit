{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"GPUMDkit Tutorials","text":"<p>Welcome to the <code>GPUMDkit</code> tutorials! This guide will help you get started with using <code>GPUMDkit</code>, a shell interface designed to streamline your <code>GPUMD</code> workflows.</p>"},{"location":"index.html#introduction","title":"Introduction","text":"<p><code>GPUMDkit</code> offers two main modes of operation:</p> <ol> <li>Interactive Mode: Run <code>gpumdkit.sh</code> and follow the menu prompts for a guided experience.</li> <li>Command-Line Mode: Directly pass arguments to <code>gpumdkit.sh</code> for quick and streamlined command execution.</li> </ol>"},{"location":"index.html#interactive-mode","title":"Interactive Mode","text":""},{"location":"index.html#getting-started","title":"Getting Started","text":"<ol> <li> <p>Open your terminal.</p> </li> <li> <p>Execute the <code>gpumdkit.sh</code> script:     <pre><code>./gpumdkit.sh\n</code></pre></p> </li> <li> <p>Follow the on-screen prompts to interactively select and run the desired script.</p> <pre><code>         ____ ____  _   _ __  __ ____  _    _ _\n        / ___|  _ \\| | | |  \\/  |  _ \\| | _(_) |_\n       | |  _| |_) | | | | |\\/| | | | | |/ / | __|\n       | |_| |  __/| |_| | |  | | |_| |   &lt;| | |_\n        \\____|_|    \\___/|_|  |_|____/|_|\\_\\_|\\__|\n\n        GPUMDkit Version 1.2.4 (dev) (2025-04-25)\n     Developer: Zihan YAN (yanzihan@westlake.edu.cn)\n\n ----------------------- GPUMD -----------------------\n 1) Format Conversion          2) Sample Structures\n 3) Workflow (dev)             4) Calculators\n 5) Developing ...             6) Developing ...\n 0) Quit!\n ------------&gt;&gt;\n Input the function number:\n</code></pre> </li> </ol> <p>This mode is useful for new users or for tasks that require step-by-step guidance.</p>"},{"location":"index.html#command-line-mode","title":"Command-Line Mode","text":""},{"location":"index.html#quick-commands","title":"Quick Commands","text":"<p>For users familiar with the <code>GPUMDkit</code> , the command-line mode allows for faster execution by directly passing arguments to <code>gpumdkit.sh</code>. Here are some examples:</p>"},{"location":"index.html#example-1-view-help-information","title":"Example 1: View help information","text":"<pre><code>gpumdkit.sh -h\n</code></pre> <p>the help information:</p> <pre><code>+==================================================================================================+\n|                              GPUMDkit 1.2.4 (dev) (2025-04-25) Usage                             |\n|                                                                 --- by Zihan YAN                 |\n+======================================== Conversions =============================================+\n| -outcar2exyz   Convert OUTCAR to extxyz       | -pos2exyz     Convert POSCAR to extxyz           |\n| -castep2exyz   Convert castep to extxyz       | -pos2lmp      Convert POSCAR to LAMMPS           |\n| -cp2k2exyz     Convert cp2k output to extxyz  | -lmp2exyz     Convert LAMMPS-dump to extxyz      |\n| -addgroup      Add group label                | -addweight    Add weight to the struct in extxyz |\n| Developing...                                 | Developing...                                    |\n+========================================= Analysis ===============================================+\n| -range         Print range of energy etc.     | -max_rmse     Get max RMSE from XYZ              |\n| -min_dist      Get min_dist between atoms     | -min_dist_pbc Get min_dist considering PBC       |\n| -filter_box    Filter struct by box limits    | -filter_value Filter struct by value (efs)       |\n| -filter_dist   Filter struct by min_dist      | Developing...                                    |\n+=========================================    Misc  ==============+================================+\n| -plt           Plot scripts                   | -get_frame     Extract the specified frame       |\n| -calc          Calculators                    | -clear_xyz     Clear extra info in XYZ file      |\n| -clean         Clear files for work_dir       | -time          Time consuming Analyzer           |\n| Developing...                                 | Developing...                                    |\n+==================================================================================================+\n| For detailed usage and examples, use: gpumdkit.sh -&lt;option&gt; -h                                   |\n+==================================================================================================+\n</code></pre>"},{"location":"index.html#example-2-convert-vasp-outcars-to-extxyz","title":"Example 2: Convert VASP OUTCARs to extxyz","text":"<p>To convert a <code>VASP</code> <code>OUTCARs</code> to an extended XYZ format (<code>extxyz</code>) file, use the following command: <pre><code>gpumdkit.sh -outcar2exyz &lt;dir_of_OUTCARs&gt;\ngpumdkit.sh -outcar2exyz .\n</code></pre></p>"},{"location":"index.html#example-3-plot-thermo-evolution","title":"Example 3: Plot thermo evolution","text":"<p>To visualize <code>thermo</code> evolution from <code>thermo.out</code> :</p> <pre><code>gpumdkit.sh -plt thermo\n</code></pre>"},{"location":"index.html#detailed-tutorials","title":"Detailed Tutorials","text":"<p>For more detailed tutorials on specific functionalities, refer to the following documents:</p> <ol> <li>Format Conversion: Detailed guide on <code>1) Format Conversion</code>.</li> <li>Sample Structures: Detailed guide on <code>2) Sample Structures</code>.</li> <li>Workflow (dev): Detailed guide on <code>3) Workflow (dev)</code>.</li> <li>Calculators: Detailed guide on <code>4) Calculators</code>.</li> <li>Activate Learning: Detailed guide on <code>workflow_activate_learning_dev.sh</code>.</li> </ol> <p>Thank you for using <code>GPUMDkit</code>! If you have any questions or need further assistance, feel free to open an issue on our GitHub repository or contact Zihan YAN (yanzihan@westlake.edu.cn).</p>"},{"location":"calculators.html","title":"Function4 - Calculators","text":"<p>This script provides a menu-driven interface to perform various tasks related to property calculations.</p>"},{"location":"calculators.html#menu-options","title":"Menu Options","text":"<pre><code>------------&gt;&gt;\n401) Calc ionic conductivity\n402) Calc properties by nep\n403) Developing ... \n000) Return to the main menu\n------------&gt;&gt;\nInput the function number:\n</code></pre>"},{"location":"calculators.html#option-401-calc-ionic-conductivity","title":"Option 401: Calc ionic conductivity","text":"<p>This script will read the <code>msd.out</code> file and then calculate the diffusivity and ionic conductivity.</p> <p>Select option <code>401</code> from the menu:</p> <pre><code>401\n</code></pre> <p>You will see the following prompt:</p> <pre><code> &gt;-------------------------------------------------&lt;\n | This function calls the script in calculators   |\n | Script: calc_ion_conductivity.py                |\n | Developer: Zihan YAN (yanzihan@westlake.edu.cn) |\n &gt;-------------------------------------------------&lt;\n Input &lt;element&gt; &lt;charge&gt; (eg. Li 1)\n ------------&gt;&gt;\n</code></pre> <p>Enter the <code>&lt;element&gt;</code> and <code>&lt;charge&gt;</code>:</p> <pre><code>Li 1\n</code></pre> <p>If required files (<code>thermo.out</code> and <code>model.xyz</code>) are not found, the script will prompt for manual input of structure <code>volume</code>, <code>number of ions</code>, and <code>temperature</code>.</p> <pre><code> Files 'thermo.out' and 'model.xyz' are not found.\n Please provide the following values:\n ---------------------------&gt;\n Enter average temperature (in K): 800\n Enter system volume (in \u00c5^3): 16785\n Enter number of ions: 448\n</code></pre> <p>You will see the following output: <pre><code>Diffusivity (D):\nD_x: 4.153e-07 cm^2/s\nD_y: 4.174e-07 cm^2/s\nD_z: 2.610e-07 cm^2/s\nD_total: 3.646e-07 cm^2/s\n------------------------------\nIonic Conductivity:\nSigma_x: 2.576e-02 mS/cm\nSigma_y: 2.589e-02 mS/cm\nSigma_z: 1.619e-02 mS/cm\nSigma_total: 2.261e-02 mS/cm\n</code></pre></p> <p>The script <code>calc_ion_conductivity.py</code> in the <code>Scripts/calculators</code> will be called to perform the calculations.</p>"},{"location":"calculators.html#option-402-calc-properties-by-nep","title":"Option 402: Calc properties by nep","text":"<p>This script will calculate energies, forces, and stresses by using the <code>calorine</code> package.</p> <p>Select option <code>402</code> from the menu:</p> <pre><code>402\n</code></pre> <p>You will see the following prompt:</p> <pre><code> &gt;-------------------------------------------------&lt;\n | This function calls the script in calculators   |\n | Script: calc_properties_with_nep.py             |\n | Developer: Zihan YAN (yanzihan@westlake.edu.cn) |\n &gt;-------------------------------------------------&lt;\n Input &lt;input.xyz&gt; &lt;output.xyz&gt; &lt;nep_model&gt; \n Examp: input.xyz outpt.xyz nep.txt\n ------------&gt;&gt;\n</code></pre> <p>Enter the <code>&lt;input.xyz&gt;</code> <code>&lt;output.xyz&gt;</code> and <code>&lt;nep_model&gt;</code>:</p> <pre><code>input.xyz output.xyz nep.txt\n</code></pre> <p>The script <code>calc_properties_with_nep.py</code> in the <code>Scripts/calculators</code> will be called to perform the calculations.</p>"},{"location":"calculators.html#option-403-calc-descriptors-of-specific-elements","title":"Option 403: Calc descriptors of specific elements","text":"<p>This script will calculate the descriptors of specific elements by using the <code>calorine</code> package.</p> <p>Select option <code>403</code> from the menu:</p> <pre><code>403\n</code></pre> <p>You will see the following prompt:</p> <pre><code> &gt;-------------------------------------------------&lt;\n | This function calls the script in calculators   |\n | Script: calc_descriptors.py                     |\n | Developer: Zihan YAN (yanzihan@westlake.edu.cn) |\n &gt;-------------------------------------------------&lt;\n Input &lt;input.xyz&gt; &lt;output.npy&gt; &lt;nep_model&gt; &lt;element&gt;\n Examp: train.xyz des_Li.npy nep.txt Li\n ------------&gt;&gt;\n</code></pre> <p>Enter the <code>&lt;input.xyz&gt;</code> <code>&lt;output.npy&gt;</code>, <code>&lt;nep_model&gt;</code> and <code>&lt;element&gt;</code>:</p> <pre><code>train.xyz des_Li.npy nep.txt Li\n</code></pre> <p>The script <code>calc_descriptors.py</code> in the <code>Scripts/calculators</code> will be called to perform the calculations, and output <code>des_Li.npy</code> for the analysis.</p>"},{"location":"format_conversion.html","title":"Function1 - Format Conversion","text":"<p>This function is used to convert various file formats. </p>"},{"location":"format_conversion.html#menu-options","title":"Menu Options","text":"<pre><code> ------------&gt;&gt;\n 101) Convert OUTCAR to extxyz\n 102) Convert mtp to extxyz\n 103) Convert cp2k to extxyz\n 104) Convert castep to extxyz\n 105) Convert extxyz to POSCAR\n 106) Developing ...\n 000) Return to the main menu\n ------------&gt;&gt;\n Input the function number:\n</code></pre>"},{"location":"format_conversion.html#option-101-convert-outcar-to-extxyz","title":"Option 101: Convert OUTCAR to extxyz","text":"<p>This option allows you to convert VASP <code>OUTCAR</code> files to <code>extxyz</code> format.</p> <p>Select option <code>101</code> from the menu:</p> <pre><code>101\n</code></pre> <p>You will see the following prompt:</p> <pre><code> &gt;-------------------------------------------------&lt;\n | This function calls the script in GPUMD's tools |\n | Script: multipleFrames-outcars2nep-exyz.sh      |\n | Developer: Yanzhou WANG (yanzhowang@gmail.com ) |\n &gt;-------------------------------------------------&lt;\n Input the directory containing OUTCARs\n ------------&gt;&gt;\n</code></pre> <p>Enter the directory containing your <code>OUTCAR</code> files:</p> <pre><code>/path/to/your/outcars\n</code></pre> <p>The script <code>multipleFrames-outcars2nep-exyz.sh</code> in GPUMD's tools will be called to perform the conversion.</p>"},{"location":"format_conversion.html#option-102-convert-mtp-to-extxyz","title":"Option 102: Convert mtp to extxyz","text":"<p>This option allows you to convert <code>cfg</code> files to <code>extxyz</code> format.</p> <p>Select option <code>102</code> from the menu:</p> <pre><code>102\n</code></pre> <p>You will see the following prompt:</p> <pre><code> &gt;-------------------------------------------------&lt;\n | This function calls the script in GPUMD's tools |\n | Script: mtp2xyz.py                              |\n | Developer: Ke XU (kickhsu@gmail.com)            |\n &gt;-------------------------------------------------&lt;\n Input &lt;filename.cfg&gt; &lt;Symbol1 Symbol2 Symbol3 ...&gt;\n Examp: train.cfg Pd Ag\n ------------&gt;&gt;\n</code></pre> <p>Enter the <code>&lt;filename.cfg&gt;</code> <code>&lt;Symbol1 Symbol2 Symbol3 ...&gt;</code> :</p> <pre><code>train.cfg Pd Ag\n</code></pre> <p>The script <code>mtp2xyz.py</code> in GPUMD's tools will be called to perform the conversion.</p>"},{"location":"format_conversion.html#option-103-convert-cp2k-to-extxyz","title":"Option 103: Convert cp2k to extxyz","text":"<p>This option allows you to convert cp2k's output to <code>extxyz</code> format.</p> <p>Select option <code>103</code> from the menu:</p> <pre><code>103\n</code></pre> <p>You will see the following prompt:</p> <pre><code> &gt;-------------------------------------------------&lt;\n | This function calls the script in GPUMD's tools |\n | Script: cp2k2xyz.py                             |\n | Developer: Ke XU (kickhsu@gmail.com)            |\n &gt;-------------------------------------------------&lt;\n Input &lt;dir_cp2k&gt;\n Examp: ./cp2k\n ------------&gt;&gt;\n</code></pre> <p>Enter the <code>&lt;dir_cp2k&gt;</code> :</p> <pre><code>./cp2k\n</code></pre> <p>The script <code>cp2k2xyz.py</code> in GPUMD's tools will be called to perform the conversion.</p>"},{"location":"format_conversion.html#option-104-convert-castep-to-extxyz","title":"Option 104: Convert castep to extxyz","text":"<p>This option allows you to convert castep's output to <code>extxyz</code> format.</p> <p>Select option <code>104</code> from the menu:</p> <pre><code>104\n</code></pre> <p>You will see the following prompt:</p> <pre><code> &gt;-------------------------------------------------&lt;\n | This function calls the script in GPUMD's tools |\n | Script: castep2nep-exyz.sh                      |\n | Developer: Yanzhou WANG (yanzhowang@gmail.com ) |\n &gt;-------------------------------------------------&lt;\n Input &lt;dir_castep&gt;\n Examp: ./castep\n ------------&gt;&gt;\n</code></pre> <p>Enter the <code>&lt;dir_castep&gt;</code> :</p> <pre><code>./castep\n</code></pre> <p>The script <code>castep2nep-exyz.sh</code> in GPUMD's tools will be called to perform the conversion.</p>"},{"location":"format_conversion.html#option-105-convert-extxyz-to-poscar","title":"Option 105: Convert extxyz to POSCAR","text":"<p>This option allows you to convert <code>extxyz</code> file to POSCAR.</p> <p>Select option <code>105</code> from the menu:</p> <pre><code>105\n</code></pre> <p>You will see the following prompt:</p> <pre><code> &gt;-------------------------------------------------&lt;\n | This function calls the script in Scripts       |\n | Script: exyz2pos.py                             |\n | Developer: Zihan YAN (yanzihan@westlake.edu.cn) |\n &gt;-------------------------------------------------&lt;\n Input the name of extxyz\n Examp: ./train.xyz \n ------------&gt;&gt;\n</code></pre> <p>Enter the <code>&lt;extxyz_filename&gt;</code> :</p> <pre><code>./train.xyz\n</code></pre> <p>The script <code>exyz2pos.py</code> in Scripts will be called to perform the conversion.</p> <p>Thank you for using <code>GPUMDkit</code>! If you have any questions or need further assistance, feel free to open an issue on our GitHub repository or contact Zihan YAN (yanzihan@westlake.edu.cn).</p>"},{"location":"plot_scripts.html","title":"Plot Scripts","text":""},{"location":"plot_scripts.html#plot-scripts","title":"Plot Scripts","text":"<p>This folder contains Python scripts for visualization of data generated by <code>GPUMD</code> and <code>NEP</code>.</p> <ul> <li><code>plt_nep_thermo.py</code>: Python script to visualize temperature, pressure, kinetic energy, potential energy, lattice parameters, volume, and interaxial angles evolution over simulation time based on data from <code>thermo.out</code>.</li> </ul> <p></p> <ul> <li><code>plt_nep_train_results.py</code>: Python script to visualize parameters during <code>NEP</code> training and comparison of <code>DFT</code> and <code>NEP</code> predictions for <code>energy</code>, <code>force</code>, <code>stress</code>, etc.</li> </ul> <ul> <li><code>plt_nep_train_test.py</code>: Python script to visualize the parity plot of <code>*_train.out</code> and <code>*_test.out</code> .</li> </ul> <p></p> <ul> <li><code>plt_nep_prediction_results.py</code>: Python script to visualize predictions during the <code>NEP</code> prediction process.</li> </ul> <p></p> <ul> <li><code>plt_force_errors.py</code>: Plot the force error evaluation metrics from <code>force_train.out</code>.</li> </ul> <p></p> <ul> <li><code>plt_descriptors.py</code>: Plot the high-dimensional descriptors in different training sets. See arXiv:2504.15925 for more details. You can generate the <code>descriptors.npy</code> by the scripts <code>calc_descriptors.py</code> in the <code>calculators</code>, or use <code>gpumdkit.sh -calc des &lt;method&gt; &lt;input.xyz&gt; &lt;output.npy&gt; &lt;element&gt;</code>.</li> </ul> <ul> <li><code>plt_msd.py</code> and <code>plt_sdc.py</code>: Python scripts to visualize the mean-square displacement (MSD) and self diffusion coefficient (SDC) from <code>msd.out</code>.</li> </ul> <ul> <li> <p><code>plt_rdf.py</code>: Python script to visualize the RDF from <code>rdf.out</code> file.</p> </li> <li> <p><code>python plt_rdf.py [save]</code> will plot all columns in the <code>rdf.out</code>.</p> <p></p> </li> <li> <p><code>python plt_rdf.py [column] [save]</code> will plot the specified column in the <code>rdf.out</code>.</p> <p> </p> </li> <li> <p><code>plt_nep_restart.py</code>: Python script to visualize the parameters in <code>nep.restart</code> file.</p> </li> </ul> <ul> <li><code>plt_dimer.py</code>: Python script to plot the dimer interaction. See arXiv:2504.15925 for more details.</li> </ul> <p><code>thermo.png</code>, <code>train.png</code>, <code>train_test.png</code>, <code>prediction.png</code>, <code>msd.png</code>, <code>nep_restart.png</code>, <code>rdf.png</code>, <code>dimer.png</code>: Example output plots generated by the scripts.</p>"},{"location":"plot_scripts.html#usage","title":"Usage:","text":"<p>You can use <code>gpumdkit.sh</code> for simplified execution:</p> <pre><code>gpumdkit.sh -plt thermo/train/prediction/train_test/msd/sdc/rdf/vac/restart/dimer/des [save]\n</code></pre> <p>Replace <code>thermo</code>, <code>train</code>, <code>prediction</code>, <code>train_test</code>, <code>msd</code>, <code>rdf</code>,<code>vac</code>, <code>restart</code>, <code>dimer</code>, <code>des</code> with the desired script keyword.</p> <p>The optional <code>save</code> argument will save the plot as a <code>PNG</code> file; omitting it will display the plot using <code>plt.show()</code>.</p>"},{"location":"plot_scripts.html#example","title":"Example:","text":"<p>To visualize <code>thermo</code> evolution from <code>thermo.out</code> :</p> <pre><code>gpumdkit.sh -plt thermo\n</code></pre> <p>To save the plot of <code>thermo</code> evolution from <code>thermo.out</code> :</p> <pre><code>gpumdkit.sh -plt thermo save\n</code></pre> <p>Thank you for using <code>GPUMDkit</code>! If you have any questions or need further assistance, feel free to open an issue on our GitHub repository or contact Zihan YAN (yanzihan@westlake.edu.cn).</p>"},{"location":"sample_structures.html","title":"Function2 - Sample Structures","text":"<p>This script provides a menu-driven interface to perform various tasks related to structure sampling.</p>"},{"location":"sample_structures.html#menu-options","title":"Menu Options","text":"<pre><code>------------&gt;&gt;\n201) Sample structures from extxyz\n202) Sample structures by pynep\n203) Find the outliers in training set\n204) Perturb structure\n205) Select max force deviation structs from active.xyz\n206) Developing ...\n000) Return to the main menu\n------------&gt;&gt;\nInput the function number:\n</code></pre>"},{"location":"sample_structures.html#option-201-sample-structures-from-extxyz","title":"Option 201: Sample Structures from extxyz","text":"<p>This option allows you to sample structures from an <code>extxyz</code> file using a specified method.</p> <p>Select option <code>201</code> from the menu:</p> <pre><code>201\n</code></pre> <p>You will see the following prompt:</p> <pre><code>&gt;-------------------------------------------------&lt;\n| This function calls the script in Scripts       |\n| Script: sample_structures.py                    |\n| Developer: Zihan YAN (yanzihan@westlake.edu.cn) |\n&gt;-------------------------------------------------&lt;\nInput &lt;extxyz_file&gt; &lt;sampling_method&gt; &lt;num_samples&gt;\nSampling_method: 'uniform' or 'random'\nExamp: train.xyz uniform 50\n------------&gt;&gt;\n</code></pre> <p>Enter the <code>extxyz</code> file name, sampling method, and number of samples:</p> <pre><code>train.xyz uniform 50\n</code></pre> <p>The script <code>sample_structures.py</code> in the <code>Scripts/sample_strcutures</code> will be called to perform the sampling.</p>"},{"location":"sample_structures.html#option-202-sample-structures-by-pynep","title":"Option 202: Sample structures by pynep","text":"<p>This function calls the <code>pynep_select_structs.py</code> in the <code>Scripts/sample_structures</code> to sampling the structures by <code>pynep</code>.</p> <p>Select option <code>202</code> from the menu:</p> <pre><code>202\n</code></pre> <p>You will see the following prompt:</p> <pre><code>&gt;-------------------------------------------------&lt;\n| This function calls the script in Scripts       |\n| Script: pynep_select_structs.py                 |\n| Developer: Zihan YAN (yanzihan@westlake.edu.cn) |\n&gt;-------------------------------------------------&lt;\nInput &lt;sample.xyz&gt; &lt;train.xyz&gt; &lt;nep_model&gt; &lt;min_dist&gt;\nExamp: dump.xyz train.xyz ./nep.txt 0.01\n------------&gt;&gt;\n</code></pre> <p><code>&lt;samle.xyz&gt;</code>: extxyz file</p> <p><code>&lt;train.xyz&gt;</code>: <code>train.xyz</code></p> <p><code>&lt;nep_model&gt;</code>: <code>nep.txt</code></p> <p><code>&lt;min_dist&gt;</code>: min_dist for pynep sampling</p> <p>Enter the following parameters:</p> <pre><code>dump.xyz train.xyz nep.txt 0.01\n</code></pre>"},{"location":"sample_structures.html#option-203-find-the-outliers-in-training-set","title":"Option 203: Find the outliers in training set","text":"<p>This function calls the <code>get_max_rmse_xyz.py</code> script to find outliers in a training set.</p> <p>Select option <code>203</code> from the menu:</p> <pre><code>203\n</code></pre> <p>You will see the following prompt:</p> <pre><code>&gt;-------------------------------------------------&lt;\n| This function calls the script in GPUMD's tools |\n| Script: get_max_rmse_xyz.py                     |\n| Developer: Ke XU (kickhsu@gmail.com)            |\n&gt;-------------------------------------------------&lt;\nInput &lt;extxyz_file&gt; &lt;*_train.out&gt; &lt;num_outliers&gt;\nExamp: train.xyz energy_train.out 13 \n------------&gt;&gt;\n</code></pre> <p><code>&lt;extxyz_file&gt;</code>: extxyz file</p> <p><code>&lt;*_train.out&gt;</code>: <code>energy_train.out</code>/<code>force_train.out</code>/`virial_train.out``</p> <p><code>&lt;num_outliers&gt;</code>: number of outliers</p> <p>Enter the <code>extxyz</code> file name, &lt;*_train.out&gt;, and number of outliers:</p> <pre><code>train.xyz energy_train.out 13 \n</code></pre> <p>The script <code>sample_structures.py</code> in the <code>Scripts/sample_strcutures</code> will be called to perform the sampling.</p>"},{"location":"sample_structures.html#option-204-perturb-structure","title":"Option 204: Perturb structure","text":"<p>This function calls the <code>perturb_structure.py</code> script to generate the perturbed structures.</p> <p>Select option <code>204</code> from the menu:</p> <pre><code>204\n</code></pre> <p>You will see the following prompt:</p> <pre><code>&gt;-------------------------------------------------&lt;\n| This function calls the script in Scripts       |\n| Script: perturb_structure.py                    |\n| Developer: Zihan YAN (yanzihan@westlake.edu.cn) |\n&gt;-------------------------------------------------&lt;\nInput &lt;input.vasp&gt; &lt;pert_num&gt; &lt;cell_pert_fraction&gt; &lt;atom_pert_distance&gt; &lt;atom_pert_style&gt;\nThe default paramters for perturb are 20 0.03 0.2 uniform\nExamp: POSCAR 20 0.03 0.2 normal\n------------&gt;&gt;\n</code></pre> <p><code>&lt;input.vasp&gt;</code>: filename.vasp</p> <p><code>&lt;pert_num&gt;</code>: number of perturbed structures</p> <p><code>&lt;cell_pert_fraction&gt;</code>: A fraction determines how much (relatively) will cell deform</p> <p><code>&lt;atom_pert_distance&gt;</code>: A distance determines how far atoms will move (in angstrom).</p> <p><code>&lt;atom_pert_style&gt;</code>: <code>&lt;uniform&gt;</code>, <code>&lt;normal&gt;</code>, <code>&lt;const&gt;</code></p> <p>Enter your parameters like:</p> <pre><code>POSCAR 20 0.03 0.2 uniform\n</code></pre> <p>The script <code>perturb_structure.py</code> in the <code>Scripts/sample_strcutures</code> will be called to perform the perturbation.</p>"},{"location":"sample_structures.html#option-205-select-max-force-deviation-structs-from-activexyz","title":"Option 205: Select max force deviation structs from active.xyz","text":"<p>This option allows you to select max force deviation structures from <code>active.xyz</code> generated by the command <code>active</code> in gpumd.</p> <p>Select option <code>205</code> from the menu:</p> <pre><code>205\n</code></pre> <p>You will see the following prompt:</p> <pre><code>&gt;-------------------------------------------------&lt;\n| This function calls the script in Scripts       |\n| Script: select_max_modev.py                    |\n| Developer: Zihan YAN (yanzihan@westlake.edu.cn) |\n&gt;-------------------------------------------------&lt;\nInput &lt;structs_num&gt; &lt;threshold&gt; (eg. 200 0.15)\n------------&gt;&gt;\n</code></pre> <p>Enter the number of structures and the <code>threshold</code> used in your <code>run.in</code>:</p> <pre><code>200 0.15\n</code></pre> <p>The script <code>select_max_modev.py</code> in the <code>Scripts/sample_strcutures</code> will be called to perform the sampling.</p> <p>Thank you for using <code>GPUMDkit</code>! If you have any questions or need further assistance, feel free to open an issue on our GitHub repository or contact Zihan YAN (yanzihan@westlake.edu.cn).</p>"},{"location":"workflow_active_learning.html","title":"Active Learning Workflow","text":""},{"location":"workflow_active_learning.html#tutorial-for-workflow_activate_learning_devsh","title":"Tutorial for workflow_activate_learning_dev.sh","text":"<p>This tutorial explains the steps and considerations involved in <code>workflow_activate_learning_dev.sh</code> script. The workflow is used to generate, select, and analyze molecular structures, followed by simulations and data collection.</p>"},{"location":"workflow_active_learning.html#overview","title":"Overview","text":"<p>This script is designed to handle molecular dynamics simulations, sampling, and SCF (self-consistent field) calculations for NEP. Below is a step-by-step guide explaining how the script works and what each part does.</p>"},{"location":"workflow_active_learning.html#1-slurm-directives","title":"1. SLURM Directives","text":"<pre><code>#!/bin/bash -l\n#SBATCH -p intel-sc3,intel-sc3-32c\n#SBATCH -q huge\n#SBATCH -N 1\n#SBATCH -J workflow\n#SBATCH -o workflow.log\n#SBATCH --ntasks-per-node=1\n</code></pre> <p>The SLURM directives are used to define how the job will be submitted to the cluster:</p> <ul> <li><code>#SBATCH -p</code> defines the partition, in this case, it's <code>intel-sc3</code> and <code>intel-sc3-32c</code>.</li> <li><code>#SBATCH -q</code> specifies the queue, in this case, <code>huge</code>.</li> <li><code>#SBATCH -N</code> allocates 1 node for the job.</li> <li><code>#SBATCH -J</code> names the job <code>workflow</code>.</li> <li><code>#SBATCH -o</code> defines the output log file as <code>workflow.log</code>.</li> <li><code>--ntasks-per-node=1</code> specifies that only one task should run per node.</li> </ul> <p>NOTE: If your machine does not have the SLURM environment, you can also run the script directly from the command line. For example:</p> <pre><code>nohup bash workflow_activate_learning_dev.sh &amp;&gt;workflow.log &amp;\n</code></pre>"},{"location":"workflow_active_learning.html#2-basic-setup","title":"2. Basic Setup","text":"<pre><code>cd $SLURM_SUBMIT_DIR \n</code></pre> <p>Ensure the working directory is correct, and that all necessary files are present for the job.</p> <pre><code>source ${GPUMDkit_path}/Scripts/workflow/submit_template.sh  # Load the submit template\npython_pynep=/storage/zhuyizhouLab/yanzhihan/soft/conda/envs/gpumd/bin/python  # Python executable\n</code></pre> <ul> <li><code>GPUMDkit_path</code> is the environment variable that stores the path for the <code>GPUMDkit</code> .</li> <li><code>python_pynep</code> points to the Python environment needed for <code>pynep</code>-related scripts.</li> </ul>"},{"location":"workflow_active_learning.html#3-variable-definitions","title":"3. Variable Definitions","text":"<pre><code>work_dir=${PWD}  # Set the working directory\nprefix_name=LiF_iter01  # Prefix for calculations\nmin_dist=1.4  # Minimum atom distance\nbox_limit=13  # Simulation box limit\nmax_fp_num=50  # Maximum number of single point calculations\nsample_method=pynep  # Sampling method (options: uniform, random, pynep)\npynep_sample_dist=0.01  # Sampling distance for pynep\n</code></pre> <p>You can customize:</p> <ul> <li><code>prefix_name</code> to reflect the name of your current work.</li> <li><code>min_dist</code>, <code>box_limit</code>, and <code>max_fp_num</code> based on your own system.</li> <li><code>sample_method</code> (choose between <code>uniform</code>, <code>random</code>, or <code>pynep</code>).</li> <li><code>pynep_sample_dist</code> is the sampling distance for <code>pynep</code>.</li> </ul>"},{"location":"workflow_active_learning.html#4-check-required-files","title":"4. Check Required Files","text":"<pre><code>if [ -f nep.txt ] &amp;&amp; [ -f nep.in ] &amp;&amp; [ -f train.xyz ] &amp;&amp; [ -f run.in ] &amp;&amp; [ -f INCAR ] &amp;&amp; [ -f POTCAR ] ; then\n    # Check for the required files before proceeding.\nelse\n    echo \"Please put nep.in nep.txt train.xyz run.in INCAR POTCAR [KPOINTS] and the sample_struct.xyz in the current directory.\"\n    exit 1\nfi\n</code></pre> <p>Make sure the necessary files (<code>nep.txt</code>, <code>nep.in</code>, <code>train.xyz</code>, <code>run.in</code>, <code>INCAR</code>, <code>POTCAR</code>, <code>KPOINTS</code>) are available in the working directory. If any of these are missing, the script will terminate. <code>train.xyz</code> and <code>nep.txt</code> are used for <code>pynep</code> sampling, and <code>run.in</code> is the simulation parameters of MD in the current iteration.</p>"},{"location":"workflow_active_learning.html#5-file-organization","title":"5. File Organization","text":"<pre><code>mkdir 00.modev common\nmv ${work_dir}/{nep.txt,nep.in,*.xyz,run.in,INCAR,KPOINTS,POTCAR} ./common\ncp ${work_dir}/common/$sample_xyz_file ${work_dir}/00.modev\n</code></pre> <p>The script organizes the working files into two folders:</p> <ul> <li><code>00.modev</code>: For molecular dynamics simulation.</li> <li><code>common</code>: For shared resources such as <code>nep.txt</code>, <code>run.in</code>, and the structure files, etc.</li> </ul>"},{"location":"workflow_active_learning.html#6-molecular-dynamics-simulation-submission","title":"6. Molecular Dynamics Simulation Submission","text":"<pre><code>submit_gpumd_array modev ${sample_struct_num}\nsbatch submit.slurm\n</code></pre> <p>After preparing the input files, the script submits an array of molecular dynamics (MD) tasks using <code>submit_gpumd_array</code>.</p>"},{"location":"workflow_active_learning.html#7-monitoring-task-completion","title":"7. Monitoring Task Completion","text":"<pre><code>while true; do\n    logs=$(find \"${work_dir}/00.modev/\" -type f -name log -path \"*/sample_*/log\")\n    finished_tasks_md=$(grep \"Finished running GPUMD.\" $logs | wc -l)\n    error_tasks_md=$(grep \"Error\" $logs | wc -l)\n\n    if [ \"$error_tasks_md\" -ne 0 ]; then\n        echo \"Error: MD simulation encountered an error.\"\n        exit 1\n    fi\n    if [ $finished_tasks_md -eq $sample_struct_num ]; then\n        break\n    fi\n    sleep 30\ndone\n</code></pre> <p>The script continuously checks whether all MD tasks have finished by searching for a <code>Finished running GPUMD.</code> message in the logs. If an error is encountered, the script terminates.</p>"},{"location":"workflow_active_learning.html#8-analysis-and-filtering","title":"8. Analysis and Filtering","text":"<pre><code>mkdir ${work_dir}/01.select\n...\n</code></pre> <p>In the <code>01.select</code> folder, all structures in the trajectory file <code>dump.xyz</code> during the MD process will be analyzed and filtered to avoid the generation of non-physical structures as much as possible. Specifically, the <code>get_min_dist.py</code>, <code>filter_structures_by_distance.py</code> and <code>filter_exyz_by_box.py</code> scripts will be employed to check whether there are situations where the distance between atoms is too close or the simulated box exceeds the limit value, and such structures will be filtered out.</p>"},{"location":"workflow_active_learning.html#9-sampling-methods","title":"9. Sampling Methods","text":"<pre><code>case $sample_method in\n    \"uniform\")\n    \"random\")\n    \"pynep\")\n</code></pre> <p>The script supports three sampling methods: <code>uniform</code>, <code>random</code>, and <code>pynep</code>. It selects structures according to the chosen method and checks if the number exceeds <code>max_fp_num</code>, ensuring the final structure count is within limits.</p>"},{"location":"workflow_active_learning.html#10-scf-calculations","title":"10. SCF Calculations","text":"<pre><code>submit_vasp_array scf ${selected_struct_num} ${prefix_name}\n</code></pre> <p>After sampling, SCF calculations are submitted using <code>submit_vasp_array</code>. The process is similar to the MD submission, but for SCF calculations.</p>"},{"location":"workflow_active_learning.html#11-prediction-step","title":"11. Prediction Step","text":"<pre><code>submit_nep_prediction\n</code></pre> <p>The final step involves submitting the NEP prediction task to check  the accuracy of the NEP model. </p> <p>Thank you for using <code>GPUMDkit</code>! If you have any questions or need further assistance, feel free to open an issue on our GitHub repository or contact Zihan YAN (yanzihan@westlake.edu.cn).</p>"},{"location":"workflow_dev.html","title":"Function3 - Workflow (dev)","text":"<p>This script provides a menu-driven interface to perform various tasks related to workflow.</p>"},{"location":"workflow_dev.html#menu-options","title":"Menu Options","text":"<pre><code>------------&gt;&gt;\n301) SCF batch pretreatment\n302) MD sample batch pretreatment (gpumd)\n303) MD sample batch pretreatment (lmp)\n304) Developing ... \n000) Return to the main menu\n------------&gt;&gt;\nInput the function number:\n</code></pre>"},{"location":"workflow_dev.html#option-301-scf-batch-pretreatment","title":"Option 301: SCF batch pretreatment","text":"<p>This script automates the preprocessing of <code>POSCAR</code> or <code>extxyz</code> files for self-consistent field (<code>SCF</code>) calculations. The script includes the following steps:</p> <ol> <li>Converts a <code>.xyz</code> file to <code>POSCAR</code> format using <code>GPUMDkit</code> if no <code>.vasp</code> files are found in the current directory.</li> <li>Renames and organizes <code>.vasp</code> files into a <code>struct_fp</code> directory.</li> <li>Creates individual directories for each <code>POSCAR</code> file, setting up symbolic links to the necessary <code>VASP</code> input files.</li> <li>Generates a <code>presub.sh</code> script to automate running <code>VASP</code> <code>SCF</code> calculations.</li> </ol>"},{"location":"workflow_dev.html#usage","title":"Usage","text":"<p>Prepare the environment:</p> <p>Ensure all <code>.vasp</code> files or a single <code>.xyz</code> file are in the current directory.</p> <p>Select option <code>301</code> from the menu:</p> <pre><code>301\n</code></pre> <p>You will see the following prompt: </p> <pre><code> Starting SCF batch pretreatment...\n Found 8 .vasp files.\n &gt;-------------------------------------------------&lt;\n | This function calls the script in Scripts       |\n | Script: scf_batch_pretreatment.sh               |\n | Developer: Zihan YAN (yanzihan@westlake.edu.cn) |\n &gt;-------------------------------------------------&lt;\n\n We recommend using the prefix to locate the structure.\n The folder name will be added to the second line of XYZ.\n config_type=&lt;prefix&gt;_&lt;ID&gt;\n ------------&gt;&gt;\n Please enter the prefix of directory (e.g. FAPBI3_iter01)\n</code></pre> <p>Enter the <code>prefix</code> of the folder name:</p> <pre><code>Li7La3Zr2O12_iter01\n</code></pre> <p>The script <code>scf_batch_pretreatment.sh</code> in the <code>Scripts</code> will be called to perform the pretreatment.</p> <p>You will see the following prompts:</p> <pre><code> &gt;-----------------------------------------------------&lt;\n ATTENTION: Place POTCAR, KPOINTS and INCAR in 'fp' Dir.\n ATTENTION: Place POTCAR, KPOINTS and INCAR in 'fp' Dir.\n ATTENTION: Place POTCAR, KPOINTS and INCAR in 'fp' Dir.\n &gt;-----------------------------------------------------&lt;\n</code></pre> <p>You need to prepare the <code>POTCAR</code>, <code>KPOINTS</code>, and <code>INCAR</code> files and place them in a directory named <code>fp</code>.</p>"},{"location":"workflow_dev.html#option-302-md-sample-batch-pretreatment-gpumd","title":"Option 302: MD sample batch pretreatment \uff08gpumd\uff09","text":"<p>This script automates the preprocessing of <code>POSCAR</code> or <code>extxyz</code> files for MD sampling using <code>GPUMD</code>. </p> <ol> <li>If <code>.vasp</code> files are found in the current directory, it will convert them to <code>extxyz</code> format to prepare the <code>model.xyz</code> file for <code>GPUMD</code>. If <code>.vasp</code> files are not found, the <code>.xyz</code> file will be read and all frames in it will be split into a individual sample.</li> <li>Renames and organizes <code>.xyz</code> files into a <code>struct_md</code> directory.</li> <li>Creates individual directories for each <code>model.xyz</code> file, setting up symbolic links to the necessary <code>GPUMD</code> input files.</li> <li>Generates a <code>presub.sh</code> script to automate running MD simulations.</li> </ol>"},{"location":"workflow_dev.html#usage_1","title":"Usage","text":"<p>Prepare the environment:</p> <p>Ensure all <code>.vasp</code> files or a single <code>.xyz</code> file are in the current directory.</p> <p>Select option <code>302</code> from the menu:</p> <pre><code>302\n</code></pre> <p>You will see the following prompt: </p> <pre><code> Starting MD sample batch pretreatment...\n No .vasp files found, but found one XYZ file.\n Converting it to model.xyz using GPUMDkit...\n All frames from \"NEP-dataset.xyz\" have been split into individual model files.\n 20 model.xyz files were generated.\n &gt;-------------------------------------------------&lt;\n | This function calls the script in Scripts       |\n | Script: md_sample_batch_pretreatment.sh         |\n | Developer: Zihan YAN (yanzihan@westlake.edu.cn) |\n &gt;-------------------------------------------------&lt;\n</code></pre> <p>You will see the following prompts:</p> <pre><code>&gt;-----------------------------------------------&lt;\nATTENTION: Place run.in and nep.txt in 'md' Dir. \nATTENTION: Place run.in and nep.txt in 'md' Dir. \nATTENTION: Place run.in and nep.txt in 'md' Dir. \n&gt;-----------------------------------------------&lt;\n</code></pre> <p>You need to prepare the <code>run.in</code> and<code>nep.txt</code> files and place them in a directory named <code>md</code>.</p> <p>Thank you for using <code>GPUMDkit</code>! If you have any questions or need further assistance, feel free to open an issue on our GitHub repository or contact Zihan YAN (yanzihan@westlake.edu.cn).</p>"}]}